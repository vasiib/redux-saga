1)async*
2)generator function

Saga
------
1) watcher
2) worker
3) put, takeEvery - effect creators

Component - action 

Middleware: code/library/logic - which helps in pre-processing the actions which are dispatched from a component
----------
saga as middleware ->

yield (effect creator) api call
yield use response

yield.next()

1) store configure
2) run the middleware
	- watcher comes into action
3) when required action gets fired, water calls the worker
	- async code:
		dispatch actions


put - to dispatch an action to redux store
call - to call method/saga-worker 
cancel - to cancel an action

component-dispatch---------------->reducer
			(watcher)---> worker
					-----> reducer

function
	return function()
		execute func()
				api.then(dispatch()).catch(dispatch())
	
addEventListener("res"func)
removeEvent(func)


----------------------------------------------

1)const fun = useCallback(func,[])
addEventlistener("event", fun)
removeEventlistener(fun)

2)func--> heavy computation, 

parent 
	func
		child(heavy operations)

parent render()
	render()

---------------------------------------
Jenkins:
    1) Manual - 
    2) npm run dev

    Project structures:
        repo_name: 
            source
                src
                packa
                .yml
            platform
                .yml
build:
    npm install
    sonar qube - unit test cases (80%), dependencies vulnerabilities
    npm build
        .build  
            dev servers deploy
console.log 
    logs --> dependency - 404 , JFROG